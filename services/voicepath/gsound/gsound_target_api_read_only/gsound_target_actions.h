// Copyright 2018 Google LLC.
// Libgsound version: 5a34367
#ifndef GSOUND_TARGET_ACTIONS_H
#define GSOUND_TARGET_ACTIONS_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This header file was generated by Google GSound Services,
 * it should not be altered in any way. Please treat this as
 * a read-only file.
 *
 * Each function listed below must
 * be implemented for each specific
 * platform / SDK
 *
 */
#include "gsound.h"

#define GSOUND_ACTION_CUSTOM_MAX_PAYLOAD 8

/**
 * Target Action Description
 *    - Actions are events resulting from user interaction with the
 *      headset that GSound is interested in.
 *
 *    - For example, if a user presses the Play/Pause button on a BT headset,
 *      GSound is interested in receiving an "Action" indicating that a
 *      Play/Pause action was triggered - GSound is not interested in which
 *      button the Play/Pause is mapped to, nor is GSound interested in the
 *      gesture (how a Play/Pause is initiated on the button: via Click,
 *      Long Click, etc.)
 *
 *    - Action Events should be communicated to GSound via
 *      the gsound_action_on_event callback
 *
 *    - Voice Query actions are divided into two mutually exclusive categories
 *        1) Push to Talk (PTT):
 *           The PTT gesture requires user to continuously actuate or interact
 *           with the UI during a voice query session. The query ends when user
 *           halts the action.
 *
 *           For example, user will press and hold mechanical or touch button
 *           while speaking the query. The query starts on button down and ends
 *           on button up
 *
 *           For example, user clicks mechanical, touch button. The query
 *           starts when the user clicks and ends automatically.
 */

/**
 * Following lists all Actions required to support GSound.
 * Please note, more than one Action can be sent to GSound
 * at any one time by performing a bitwise OR of the values
 * in this type.
 */
typedef enum {

  /**
   * Event to be sent indicating the specific action is still unknown, but
   * all possible actions will pause media. the companion should start the pause
   * process now for latency reasons. Typically sent along with VOICE_PREPARE
   * and/or FETCH_PREPARE the moment a fetch or query button is pressed
   */
  GSOUND_TARGET_ACTION_GA_WILL_PAUSE = (1 << 0),

  /**
   * Event to be sent when a VOICE Push to Talk (PTT) session is imminent - or
   may soon be triggered.
   *
   * This event is typically sent on a button down event to
   * indicate the possibility of an upcoming VOICE action.
   * The GSound companion App will use this event to warm up
   * the Google Assistant stack for faster response.
   *
   * A VOICE_DONE is always required following a VOICE_PREPARE
   *
   * The following options are valid for PREPARE events:
   *     -------------------------------------------------------------------
   *  1) [IDLE --> VOICE_PREPARE --> VOICE_DONE --> IDLE]
   *        - Voice Query is not triggered
   *     ------------------------------------------------------------------
   *  2) [IDLE --> VOICE_PREPARE --> VOICE_PTT --> VOICE_DONE --> IDLE]
   *        - Voice Query is triggered
   *     -------------------------------------------------------------------

   */
  GSOUND_TARGET_ACTION_GA_VOICE_PREPARE = (1 << 1),

  /**
   * Event to be sent when the Push to Talk (PTT)
   * Voice Query criteria has been met and the user is
   * actively performing voice input.
   *
   * This event must be preceded by GSOUND_TARGET_ACTION_EVENT_VOICE_PREPARE.
   *
   * For example, if the headset contains a dedicated
   * Google Assistant button, this event should be fired
   * when a long click or long press has been detected.
   *
   * The following options are valid for PTT events:
   *     -------------------------------------------------------------------
   *  1) [IDLE --> VOICE_PREPARE --> VOICE_PTT --> VOICE_DONE --> IDLE]
   *        - Voice Query is triggered
   *     -------------------------------------------------------------------
   */
  GSOUND_TARGET_ACTION_GA_VOICE_PTT = (1 << 2),

  /**
   * Event to be sent when user is no longer performing a PTT Voice
   * Query. This event can be used to indicate the end of both a PTT
   * Voice Query. This event should be sent after a VOICE_PREPARE if it is
   * determined the gesture was not a PTT.
   *
   * Note, this event is required for PTT.
   *
   * For example, this event should be fired when a
   * button up has been detected during a PTT.
   *
   */
  GSOUND_TARGET_ACTION_GA_VOICE_DONE = (1 << 3),

  /**
   * Event to be sent when a user would like to terminate or cancel an ongoing
   * Voice Query session. This event can be sent both during a Voice Query
   * session or while the Assistant is responding/reading notifications.
   */
  GSOUND_TARGET_ACTION_GA_STOP_ASSISTANT = (1 << 4),

  /**
   * Event to be sent when a user would like
   * to respond to Google Assistant to perform such
   * actions as confirmation, expanding announcements,
   * or responding to messages.
   */
  GSOUND_TARGET_ACTION_GA_VOICE_CONFIRM = (1 << 5),

  /**
   * Event to be sent when a Notification Fetch
   * is imminent - or may soon be triggered.
   *
   * This event is typically sent on a button down event to
   * indicate the possibility of an upcoming notification fetch.
   * The GSound companion App will use this event to warm up
   * the Google Assistant stack for faster response.
   *
   * For example, if the headset contains a dedicated
   * Google Assistant button, this event should be fired
   * when a button down has been detected.
   */
  GSOUND_TARGET_ACTION_GA_FETCH_PREPARE = (1 << 6),

  /**
   * Event to be sent when the Notification Fetch
   * criteria has been met and the user has definitely
   * requested for notifications.
   *
   * For example, if the headset contains a dedicated
   * Google Assistant button, this event should be fired
   * when a short click or short press has been detected.
   *
   * The following options are valid for Fetch events:
   *     -------------------------------------------------------------------
   *  1) [IDLE --> FETCH_PREPARE --> IDLE]
   *      - Fetch is not triggered
   *     -------------------------------------------------------------------
   *  2) IDLE --> FETCH_PREPARE --> FETCH --> IDLE
   *      - Fetch is triggered
   *     -------------------------------------------------------------------
   */
  GSOUND_TARGET_ACTION_GA_FETCH = (1 << 7),

  /**
   * Event to be sent to do a query or fetch if no speech is detected in the
   * query. This Action should be used in place of
   * GSOUND_TARGET_ACTION_GA_VOICE_PTT if an empty query is meant to trigger a
   * fetch. GSOUND_TARGET_ACTION_GA_VOICE_PREPARE is required before this event.
   * GSOUND_TARGET_ACTION_GA_FETCH should not be sent if this Action is used.
   */
  GSOUND_TARGET_ACTION_GA_VOICE_PTT_OR_FETCH = (1 << 8),

  /**
   * Event to be sent when a Skip Current Announcement Action request has
   * occured
   */
  GSOUND_TARGET_ACTION_GA_SKIP_ANNOUNCEMENT = (1 << 9),

  /**
   * Event to be sent if no Action should occur in the Assistant context
   */
  GSOUND_TARGET_ACTION_GA_NO_OP = (1 << 10),

  /**
   * Event to be sent when a Play/Pause Toggle Action request has occurred
   */
  GSOUND_TARGET_ACTION_TOGGLE_PLAY_PAUSE = (1 << 11),

  /**
   * Event to be sent when a Next Track Action request has occurred
   */
  GSOUND_TARGET_ACTION_NEXT_TRACK = (1 << 12),

  /**
   * Event to be sent when a Previous Track Action request has occurred
   */
  GSOUND_TARGET_ACTION_PREV_TRACK = (1 << 13),

  /**
   * Event to be sent when the legacy HFP-based Voice Activation action has
   * occured
   */
  GSOUND_TARGET_ACTION_LEGACY_VOICE_ACTIVATION = (1 << 14),

  /**
   * Event to be sent when a custom opaque payload is to be sent to the phone.
   */
  GSOUND_TARGET_ACTION_CUSTOM = (1 << 15),

  /**
   * DO NOT USE
   */
  GSOUND_TARGET_ACTION_MAX = (1 << 16),
} GSoundActionEvents;

/**
 * A bitmask of the above GSoundActionEvents ORed together
 */
typedef int GSoundActionMask;

/**
 * An opaque payload to be interpreted by the Bisto phone app.
 */
typedef struct {
  uint8_t payload[GSOUND_ACTION_CUSTOM_MAX_PAYLOAD];
} GSoundActionCustom;

/*******************************************************************************
 * Following declares the Action Target
 * Interface API.
 ******************************************************************************/
typedef struct {
  /**
   * Callback to execute when an Action Event has occurred.
   *
   * This function is non-blocking and thread safe. It can be called from any
   * thread/context including an ISR.
   *
   * Note: In case of a TWS system - target layer must still execute this
   * callback and provide the Action event to the master whether the Action was
   * triggered on the Master or Slave device
   *
   * param[in]: action_event A "bit-field" of one or more Actions OR'ed
   * together from type GSoundActionEvents
   *
   * param[in]: custom Pointer to payload for a custom Action. Only used if
   * GSOUND_TARGET_ACTION_CUSTOM is set in action_event, ignored otherwise.
   * Fully consumed after function returns and can be overwritten or freed. The
   * max size payload will be sent to the phone whether or not the full size is
   * used.
   */
  GSoundStatus (*gsound_action_on_event)(GSoundActionMask action_event,
                                         const GSoundActionCustom *custom);
} GSoundActionInterface;

/**
 * In cases where GSound cannot handle certain actions, GSound will
 * call this function and provide the rejected action events. From this function
 * call, Target should properly handle the Actions.
 *
 * For example, Play/Pause is normally routed to GSound via
 * GSOUND_TARGET_ACTION_EVENT_TOGGLE_PLAY_PAUSE. If rejected, Target should
 * issue an AVRCP Play/Pause. If multiple actions are sent to GSound, multiple
 * actions may be rejected. All rejected actions should be handled by the
 * Target.
 *
 * Note: GA actions will not be rejected.
 *
 * Multi-Threaded Environment:
 *    - This function will be called out of the GSound Thread context and
 *      must be non-blocking.
 *
 * param[in]: rejected_action A "bit-field" of one or more Actions OR'ed
 *                          together from type GSoundActionEvents
 */
GSoundStatus GSoundTargetActionRejected(GSoundActionMask rejected_action);

/*******************************************************************************
 * Initialize action handling.
 *
 * This function will be called during boot-up from GSoundServiceInit().
 *
 * Target layer is responsible for enabling any required interrupts, threads,
 * timers, or services required to receive and process Action Events.
 *
 * In addition, target layer must map gestures on the device to the
 * GSoundActionEvents listed above.
 *
 * param[in]: handlers, pointer to structure containing the callback
 *            function as defined in GSoundActionInterface
 ******************************************************************************/
GSoundStatus GSoundTargetActionInit(const GSoundActionInterface *handlers);

#ifdef __cplusplus
}
#endif

#endif  // GSOUND_TARGET_ACTIONS_H
