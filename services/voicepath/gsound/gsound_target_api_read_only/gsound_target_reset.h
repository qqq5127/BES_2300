// Copyright 2018 Google LLC.
// Libgsound version: 5a34367
#ifndef GSOUND_TARGET_RESET_H
#define GSOUND_TARGET_RESET_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This header file was generated by Google GSound Services,
 * it should not be altered in any way. Please treat this as
 * a read-only file.
 *
 * Each function listed below must
 * be implemented for each specific
 * platform / SDK
 *
 */
#include "gsound.h"

/**
 * Reset reason types
 */
typedef enum {
  /**
   * Abnormal reset or reboot of MCU, but the reason is unknown.
   */
  GSOUND_RESET_TYPE_UNKNOWN,

  /**
   * Normal reset or reboot of the MCU.
   */
  GSOUND_RESET_TYPE_NORMAL,

  /**
   * Reset or reboot resulting from a software triggered assert.
   */
  GSOUND_RESET_TYPE_ASSERT,

  /**
   * Reset or reboot resulting from a hardware triggered exception or hardfault.
   */
  GSOUND_RESET_TYPE_EXCEPTION,

  /**
   * Reset resulting from a Watchdog Timeout.
   */
  GSOUND_RESET_WATCHDOG
} GSoundResetReason;

/**
 * Data structure element for a
 * specific Crash Dump sub-type within GSoundCrashFatalDump
 */
typedef struct {
  /**
   * Pointer to a variable length field containing
   * crash dump information. Note, this field will be consumed
   * before the Target API returns. There is no need to retain this
   * data beyond the return of GSoundTargetGetCrashDump.
   */
  uint8_t *data;

  /**
   * Length in bytes of data present at the location pointed
   * to by previous element.
   */
  uint32_t len;
} GSoundCrashDumpElement;

/**
 * Data structure defining the required
 * data when a crash dump occurs
 */
typedef struct {
  /**
   * Contains the source or reason for the current crash dump.
   * If device did not crash, this field should be populated with
   * GSOUND_RESET_TYPE_NORMAL
   */
  GSoundResetReason reason;

  /**
   * Contains the file, function, and line number that caused
   * the current crash. This information should be
   * presented as a formatted NULL terminated ASCII string.
   *
   * The length of this field should be limited to 64 bytes
   */
  GSoundCrashDumpElement panic_file;

  /**
   * A binary array of core MCU registers captured at the time
   * of the crash (assert, exception, hardfault).
   *
   * The length of this field should be limited to 80 bytes
   */
  GSoundCrashDumpElement registers;

  /**
   * A binary array of the current stack location captured at the
   * time of the crash (assert, exception, hardfault).
   *
   * The length of this field should be limited to 384 bytes
   */
  GSoundCrashDumpElement stack;

  /**
   * Custom information for Target.
   */
  GSoundCrashDumpElement custom;
} GSoundCrashFatalDump;

/**
 * Should retrieve crash dump information from the system and call the
 * "callback" parameter.
 *
 * If a Crash Dump is not available, target should populate the "reason" field
 * in the gsound_crash callback parameter with GSOUND_RESET_TYPE_NORMAL and call
 * the callback function.
 *
 * Note the entire content of gsound_crash will be consumed before the callback
 * function returns. There is no need to retain any memory allocated to populate
 * gsound_crash beyond the return of that function.
 *
 * The callback function must be called immediately on this thread.
 *
 * param[in]: callback function to call with crash dump information populated.
 */
void GSoundTargetGetCrashDump(
    void (*callback)(const GSoundCrashFatalDump *gsound_crash));

/**
 * Should return the reason for the most recent reset.
 *
 * param[out]: gsound_reset Pointer to reset reason data structure which the
 *                          implementation of this function must populate
 */
GSoundStatus GSoundTargetGetResetReason(GSoundResetReason *gsound_reset);

#ifdef __cplusplus
}
#endif

#endif  // GSOUND_TARGET_RESET_H
