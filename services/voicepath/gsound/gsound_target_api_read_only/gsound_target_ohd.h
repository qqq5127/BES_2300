// Copyright 2018 Google LLC.
// Libgsound version: 5a34367
#ifndef GSOUND_TARGET_OHD_H
#define GSOUND_TARGET_OHD_H

#include "gsound.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This header file was generated by Google GSound Services,
 * it should not be altered in any way. Please treat this as
 * a read-only file.
 *
 * Each function listed below must
 * be implemented for each specific
 * platform / SDK
 *
 */

/**
 * OHD stands for "On-Head Detection"
 *
 * Target must notify GSound when it determines a change in the on head
 * detection state (e.g. headset removed from head, single earbud removed)
 *
 * GSound may asynchronously request the on-head detection state
 */

typedef enum {
  OHD_UNSET = 0,

  /*
   * OHD sensor disabled on device.
   *
   * This is sent if the user has disabled OHD (e.g. from the companion app)
   */
  OHD_DISABLED = 1,

  /*
   * Unknown state due to internal error
   */
  OHD_UNKNOWN = 2,

  /*
   * The device is not on the head. For a multi-part device (e.g., left+right
   * units) this means both parts are off the head.
   */
  OHD_NONE_DETECTED = 3,

  /*
   * OHD for multi-part: only left detected
   * Right is either not on head or not connected.
   */
  OHD_LEFT_DETECTED = 4,

  /*
   * OHD for multi-part: only right detected
   * Left is either not on head or not connected.
   */
  OHD_RIGHT_DETECTED = 5,

  /*
   * OHD for multi-part: left & right detected
   */
  OHD_BOTH_DETECTED = 6,

  /*
   * OHD for single-part: device detected
   */
  OHD_SINGULAR_DETECTED = 7,

  /*
   * Device does not contain an OHD sensor.
   */
  OHD_UNSUPPORTED = 8,
} GSoundOhdState;

typedef struct {
  /**
   * Callback to execute in two cases:
   *   - in response to GSound calling GSoundTargetGetOhdState, and
   *   - when the on head detection status has changed.
   */
  GSoundStatus (*gsound_ohd_status)(GSoundOhdState ohd_status);
} GSoundOhdInterface;

/**
 * When GSound calls this API:
 *  - If the OHD status can be obtained synchronously within this function call:
 *      * The target must set the `ohd_state_out` parameter.
 *      * Do not call the `gsound_ohd_status` callback.
 *  - Otherwise, if the OHD status is not available yet:
 *      * Respond later by calling the `gsound_ohd_status` callback.
 *      * NOTE: `gsound_ohd_status` cannot be called from within this function.
 *      * In this case, target must leave ohd_state_out param unchanged
 *
 *  param[out] ohd_status_out  if OHD status is available immediately, target
 *                             should populate this argument. Otherwise, ignore.
 */
GSoundStatus GSoundTargetGetOhdState(GSoundOhdState *ohd_status_out);

/*******************************************************************************
 * Initialize action handling.
 *
 * This function will be called during boot-up from GSoundServiceInit().
 *
 * param[in]: handlers, pointer to structure containing the callback functions
 *            as defined in GSoundOhdInterface.
 ******************************************************************************/
GSoundStatus GSoundTargetOhdInit(const GSoundOhdInterface *handler);

#ifdef __cplusplus
}
#endif

#endif  // GSOUND_TARGET_OHD_H
