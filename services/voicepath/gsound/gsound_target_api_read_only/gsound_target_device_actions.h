// Copyright 2019 Google LLC.
// Libgsound version: 5a34367
#ifndef GSOUND_TARGET_DEVICE_ACTIONS_H
#define GSOUND_TARGET_DEVICE_ACTIONS_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This header file was generated by Google GSound Services,
 * it should not be altered in any way. Please treat this as
 * a read-only file.
 *
 * Each function listed below must
 * be implemented for each specific
 * platform / SDK
 *
 */

#include "gsound_target.h"

/**
 * # Device Actions High Level Description
 * Device Actions adds the ability to control the target using voice commands
 * from the end user. These commands can control the target device or get status
 * from the target device. Examples of control actions are things like turning
 * off the device and setting ANC level. Examples of target status are things
 * such as battery status or current ANC level.
 *
 * This API defines the methods used to transport the device action commands
 * from Google to the target and the methods used to transport state from the
 * target to Google.  Contact Google partner engineering for detailed encoding
 * definition of the byte arrays.
 *
 * For device actions that query the state of the target (for example, current
 * noise cancellation level), the noise cancellation level must be included and
 * kept up-to-date using gsound_target_device_actions_state_update. Voice
 * queries will use that state if applicable.
 *
 * As a partner adds, removes, or modifies device actions, their action device model
 * on Google's server will change. For backwards compatibility, there is a
 * device actions model ID that will be used to reference a specific version of
 * this device actions model.  This device actions model ID is sent by the
 * target to GSound using gsound_target_device_actions_model_id. Contact
 * Google partner engineering for detailed encoding definition.
 *
 * # Flow for Device Actions:
 * GSound calls GSoundTargetDeviceActionsInit.  Target stores the provided
 * handler.
 *
 * Whenever a connection is (re)established with the assistant companion app,
 * GSound will call GSoundTargetDeviceActionsRequestState. Later (as soon as
 * possible), the target performs a gsound_target_device_actions_model_id
 * followed by one gsound_target_device_actions_state_update for each state
 * value that is defined for this target.
 *
 * The target must also call gsound_target_device_actions_state_update whenever
 * state changes.  This should not be more frequently than every 15
 * seconds. A reasonable update interval is state dependent.  When GSound is
 * done with the data from a gsound_target_device_actions_state_update, GSound
 * will call GSoundTargetDeviceActionsStateUpdateConsumed.  This call will be
 * made for all gsound_target_device_actions_state_update callbacks, both
 * the initial call and all subsequent update calls.
 *
 * When Google Assistant detects a known device action command in a query,
 * GSound will call GSoundTargetDeviceActionsSet.
 */

/*******************************************************************************
 * Following declares the standard Device Actions Interface API.
 ******************************************************************************/

/**
 * The length of the device model ID must not exceed
 * GSOUND_TARGET_DEVICE_ACTIONS_MODEL_ID_MAX_LENGTH. GSound will ASSERT if it
 * receives a device model ID that is larger than this. This constraint must be
 * maintained when device actions models are being designed.
 */
#define GSOUND_TARGET_DEVICE_ACTIONS_MODEL_ID_MAX_LENGTH   120
/**
 * The combined length of the key and value within each state must not exceed
 * GSOUND_TARGET_DEVICE_ACTIONS_STATE_MAX_LENGTH. GSound will ASSERT if it
 * receives a state that is larger than this. This constraint must be maintained
 * when device actions models are being designed.
 */
#define GSOUND_TARGET_DEVICE_ACTIONS_STATE_MAX_LENGTH      120
/**
 * To ensure robustness of device actions commands, the length of any device
 * action command must not exceed GSOUND_TARGET_DEVICE_ACTIONS_COMMAND_MAX_LENGTH.
 * GSound will ASSERT if it receives a device command from Google’s server
 * that is larger than this. This constraint must be maintained when device
 * actions models are being designed.
 */
#define GSOUND_TARGET_DEVICE_ACTIONS_COMMAND_MAX_LENGTH    120

typedef struct {
  /**
   * Called by target to inform GSound of the device actions device_model_id.
   * Must be called by the target every time that GSound executes
   * GSoundTargetDeviceActionsRequestState.
   *
   * Note that there is no "consumed" function for the device_action_model_id
   * because the model id is expected to be unchanging for a specific revision
   * of the target firmware.  The model id should therefore reside in flash.
   *
   * param[in]:
   *     device_action_model_id - Identifies the device model implemented by
   *         this target.
   *     device_action_model_id_len - The length of the device model ID shall
   *         not exceed GSOUND_TARGET_DEVICE_ACTIONS_MODEL_ID_MAX_LENGTH.
   *
   * returns: GSOUND_STATUS_OK: normal completion.
   *          GSOUND_STATUS_ERROR: Any error.  The target may retry.
   */
  GSoundStatus (*gsound_target_device_actions_model_id)(
      const char * const device_action_model_id,
      uint32_t device_action_model_id_len);

  /**
   * Callback executed by the target to update the value of one device
   * action state. When GSound calls GSoundTargetDeviceActionsRequestState, the
   * target must initialize all states that are defined in the given device
   * actions model (later, not nested). After that, each state must be updated
   * again whenever its value changes. Note that for a given actions
   * configuration, there may be no states or there may be many states.
   *
   * The state should not need to be updated more often than once every
   * 15 seconds. State that would need to be updated more often would likely
   * lead to queries returning stale data.
   *
   * After this callback, action_state_key and action_state_value must not be
   * modified or freed until GSoundTargetDeviceActionsStateUpdateConsumed is
   * received by the target with the same action_state_key.
   *
   * param[in]:
   *     action_state_key - key for this state variable.
   *     action_state_value - Current value of this state.
   *         The combination of lengths of the key and value shall not exceed
   *         GSOUND_TARGET_DEVICE_ACTIONS_STATE_MAX_LENGTH.
   *
   * returns: GSOUND_STATUS_OK: normal completion.
   *          GSOUND_STATUS_ERROR: Any error.  The target may retry the update.
   */
  GSoundStatus (*gsound_target_device_actions_state_update)(
      const uint8_t * const action_state_key, uint32_t action_state_key_len,
      const uint8_t * const action_state_value,
      uint32_t action_state_value_len);
} GSoundDeviceActionsInterface;

/**
 * Sent to target when GSound is finished processing the action_state_key/value
 * from a target callback to gsound_target_device_actions_state_update.
 */
void GSoundTargetDeviceActionsStateUpdateConsumed(
    const uint8_t * const action_state_key);

/**
 * When the target receives this request, it must call (later, not nested)
 * gsound_target_device_actions_model_id one time and
 * gsound_target_device_actions_state_update once for each device action state
 * that is defined for this device actions model.
 *
 * returns: GSOUND_STATUS_OK unless something went wrong in which case returns
 *          GSOUND_STATUS_ERROR and device actions will not be supported.
 */
GSoundStatus GSoundTargetDeviceActionsRequestState(void);

/**
 * Function will be called by GSound when target firmware should execute
 * device_action(s). This happens when a voice query matches one of the defined
 * device actions for this partner.
 *
 * param[in]:
 *     device_actions - Buffer containing one or more device action commands.
 *         Buffer is invalid when this function returns.
 *     device_actions_len - Number of bytes in device_actions.
 *
 * returns: GSOUND_STATUS_OK: normal completion.
 *          GSOUND_STATUS_NOT_SUPPORTED:
 *              If device action is not implemented. This should not happen
 *              since configuration ID is intended to match a set of
 *              supported device actions between target and Google server.
 *          GSOUND_STATUS_ERROR: Any other error.
 */
GSoundStatus GSoundTargetDeviceActions(const uint8_t * const device_actions,
                                       uint32_t device_actions_len);

/**
 *  No action is needed besides storing the handler APIs
 */
void GSoundTargetDeviceActionsInit(const GSoundDeviceActionsInterface *handler);

#ifdef __cplusplus
}
#endif

#endif  // GSOUND_TARGET_DEVICE_ACTIONS_H
