// Copyright 2018 Google LLC.
// Libgsound version: 5a34367
#ifndef GSOUND_SERVICE_H
#define GSOUND_SERVICE_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This header file was generated by Google GSound Services,
 * it should not be altered in any way. Please treat this as
 * a read-only file.
 *
 */
#include "gsound.h"

/*******************************************************************************
 * Type definitions
 ******************************************************************************/

/**
 * Following declares the GSound Service Configuration settings.
 * This information is used to configure GSound during boot-up
 */
typedef struct {

  /**
   * Initial state of Google Assistant provided to GSound.
   *
   * This value must be initialized with the Google Assistant state stored in
   * Non-Volatile memory.
   *
   * Note: User is required to store the Google Assistant state in Non-Volatile
   * memory and update it in response to on_gsound_enabled() and
   * on_gsound_disabled() callbacks as documented below.
   *
   */
  bool gsound_enabled;

} GSoundServiceConfig;

/**
 * The following observer interface contains callbacks which can be used
 * to receive various events from GSound.
 */
typedef struct {

  /**
   * GSound executes this callback whenever the Google Assistant feature has
   * been enabled on the headset.
   *
   * This callback should be used to store GSOUND ENABLED state in Non-Volatile
   * memory and inform the OEM Companion Application on the phone (if available)
   * that Google Assistant has been enabled. In response, The OEM Companion
   * Application must update its state and UI to reflect this change.
   *
   * Note: On a TWS device, each bud must store this state. The target must
   * synchronize this state between the buds making sure that the most recent
   * state is present on all buds. If the buds are not currently connected, it
   * is necessary to synchronize this state once they do become reconnected. The
   * requirement to use the most recent state implies the need for additional
   * target-specific state that can identify which bud has the most recent
   * state.  When this bud's state is modified due to a change synchronized from
   * the other bud, this bud will need to call GSoundServiceEnable or
   * GSoundServiceDisable.
   *
   * Note: This callback will be executed when GSound internally determines
   * that Google Assistant has been enabled as well as from the following
   * API calls: GSoundServiceEnable, and GSoundServiceInit.
   *
   * Note: The implementation of this callback must be non-blocking.
   *
   * Note: When GSound is enabled, any shared user gestures and/or inputs
   * required by GSound must be provided to GSound through the platform SDK.
   * Refer to the Target API headers regarding Actions for more details.
   *
   */
  void (* on_gsound_enabled)( void );

  /**
   * GSound executes this callback whenever the Google Assistant feature has
   * been disabled on the headset.
   *
   * This callback should be used to store GSOUND DISABLED state in Non-Volatile
   * memory and inform the OEM Companion Application on the phone (if available)
   * that Google Assistant has been disabled. In response, The OEM Companion
   * Application must update its state and UI to reflect this change.
   *
   * Note: On a TWS device, each bud must store this state. The target must
   * synchronize this state between the buds making sure that the most recent
   * state is present on all buds. If the buds are not currently connected, it
   * is necessary to synchronize this state once they do become reconnected. The
   * requirement to use the most recent state implies the need for additional
   * target-specific state that can identify which bud has the most recent
   * state.  When this bud's state is modified due to a change synchronized from
   * the other bud, this bud will need to call GSoundServiceEnable or
   * GSoundServiceDisable.
   *
   * Note: This callback will be executed when GSound internally determines
   * that Google Assistant has been disabled as well as from the following
   * API calls: GSoundServiceDisable, and GSoundServiceInit.
   *
   * Note: The implementation of this callback must be non-blocking.
   *
   * Note: GSound will continue to remain active when Google Assistant has been
   * disabled. All BT and/or BLE connections and services must remain unchanged.
   * Any shared user gestures and/or inputs required by GSound can be repurposed
   * or reused by the OEM application on the headset. Refer to the Google UX
   * guidelines for more details.
   *
   */
  void (* on_gsound_disabled)( void );

} GSoundServiceObserver;

/*******************************************************************************
 * Function declarations
 ******************************************************************************/

/**
 * This function should be called any time Google Assistant has been enabled
 * by the end user through the OEM Companion Application on the phone.
 *
 * Note: The callback on_gsound_enabled() will be executed in response to
 * this API call. On multi-threaded platforms this callback will be executed
 * asynchronously from the GSound thread. On single-threaded platforms, the
 * callback is executed from within this function. Refer to on_gsound_enabled().
 *
 */
GSoundStatus GSoundServiceEnable( void );

/**
 * This function should be called any time Google Assistant has been disabled
 * by the end user through the OEM Companion Application on the phone.
 *
 * Note: The callback on_gsound_disabled() will be executed in response to
 * this API call. On multi-threaded platforms this callback will be executed
 * asynchronously from the GSound thread. On single-threaded platforms, the
 * callback is executed from within this function. Refer to on_gsound_enabled().
 *
 */
GSoundStatus GSoundServiceDisable( void );

/**
 * Entry-point into the GSound Service.
 * This call must be followed by exactly one of either GSoundServiceInitAsStereo or
 * GSoundServiceInitAsTws. If this specific product is TWS, then use this sequence:
 *    GSoundServiceInit();
 *    GSoundServiceInitAsTws();
 * For all other products, use this sequence:
 *    GSoundServiceInit();
 *    GSoundServiceInitAsStereo();
 *
 * Must always be called at boot-up. GSound Service will run in the background.
 *
 * param[in]: gsound_build_id: GSOUND_BUILD_ID from gsound.h. This parameter is
 *                             used to ensure the GSound Library matches the
 *                             Target API header files in use by the SDK
 * param[in]: gsound_config:   Pointer to GSound configuration structure. This
 *                             information is required in order for GSound to
 *                             operate properly. The content of this pointer
 *                             will be fully consumed prior to returning from
 *                             this function. Refer to GSoundServiceConfig for
 *                             more details.
 * param[in]: gsound_observer: Pointer to GSound Service observer. Refer
 *                             to GSoundServiceObserver for more details.
 *
 */
void GSoundServiceInit(const char *gsound_build_id,
                       const GSoundServiceConfig *gsound_config,
                       const GSoundServiceObserver *observer);

/**
 * Entry-point into the GSound Service for the TWS component.
 * This call must follow GSoundServiceInit.  If you call this, do not call
 * GSoundServiceInitAsStereo.  Use of this component requires implementation/use of
 * gsound_target_tws.h.
 *
 * Note: In case of a TWS system - GSound will  be active only on the master
 * device and dormant on the slave.
 */
void GSoundServiceInitAsTws(void);

/**
 * Entry-point into the GSound Service if the TWS component is not to be used.
 * This call must follow GSoundServiceInit.  If you call this, do not call
 * GSoundServiceInitAsTws. If you use this call, no implementation/use of
 * gsound_target_tws.h is needed/permitted.
 */
void GSoundServiceInitAsStereo(void);

/**
 * For targets who do not support hotword, do not call either of these below
 * functions.
 *
 * For targets wishing to support internal hotword, where hotword detection and
 * buffering are managed by libgsound, call GSoundServiceInitHotwordInternal.
 *
 * For targets wishing to support external hotword, where hotword detection and
 * buffering are managed by the target, call GSoundServiceInitHotwordExternal.
 */
void GSoundServiceInitHotwordInternal(void);
void GSoundServiceInitHotwordExternal(void);

#ifdef __cplusplus
}
#endif

#endif /* GSOUND_SERVICE_H */
