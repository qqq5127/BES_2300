// Copyright 2018 Google LLC.
// Libgsound version: 5a34367
#ifndef GSOUND_TARGET_TWS_H
#define GSOUND_TARGET_TWS_H

#ifdef __cplusplus
extern "C" {
#endif

/**
 * This header file was generated by Google GSound Services,
 * it should not be altered in any way. Please treat this as
 * a read-only file.
 *
 * Each function listed below must
 * be implemented for each specific
 * platform / SDK
 *
 */

/*
 * This file, in its entirety, is needed only for a target that supports TWS.
 * If your target is not TWS, do not include this file or use it.
 */

#include "gsound_target.h"

/**
 * # TWS (True Wireless) Description
 *
 * NOTE that, on a TWS device, the gsound_enable state must be syncrhonized
 * between the buds.  See gsound_service.h for details.
 *
 * ## Initialization
 *
 * Initially, GSoundTargetTwsInit is called by GSound.  The target must sometime
 * call gsound_tws_role_change_init_role on both the master and the slave to set
 * which device is the master and slave. Until gsound_tws_role_change_init_role
 * is executed, GSound will do nothing.
 *
 * ## Controlled switch
 *
 * A "controlled" switch is a switch while the master and slave can still
 * communicate.
 *
 * ### Controlled switch on master
 *
 * For the master to role change to slave:
 *    1. Call gsound_tws_role_change_request on the master.
 *    2. Some time later, GSound will call GSoundTargetTwsRoleChangeResponse
 *        - if rejected, then it is undesirable to do a role change at this
 *          time (e.g. voice query ongoing or expected soon). No change in
 *          state. Target should start over from step 1 and call
 *          gsound_tws_role_change_request at a later time.
 *        - if accepted, then target is free to perform a role change. Note that
 *          GSound will not accept voice queries until the role change is
 *          complete.
 *    3. Call gsound_tws_role_change_perform after GSound responds with
 *       GSoundTargetTwsRoleChangeResponse(accepted) to allow the role change to
 *       proceed.
 *    4. If the target needs to do a role switch now and cannot wait for GSound
 *       to accept a request, it can instead call gsound_tws_role_change_force.
 *    5. After the target calls gsound_tws_role_change_perform or
 *       gsound_tws_role_change_force, GSound will some time later call the
 *       target's implementation of GSoundTargetTwsRoleChangeGSoundDone. The
 *       target may then finish its own role change.
 *    6. After the target does the role change, it calls
 *       gsound_tws_role_change_target_done on the new master and new slave.
 *
 *   [start, device is master] <-----------------------------T
 *             |                                             |
 *             |                                             |
 *             v                                             |
 * [       target call            ]                          |
 * [gsound_tws_role_change_request]                          ^
 *             |                                             |
 *             |                                             |
 *             |  [     optional target call    ]            |
 *             +--[gsound_tws_role_change_cancel]--->--------+
 *             |                                             |
 *             |                                             |
 *             |                                             |
 * [GSound will call target's definition]                    |
 * [of GSoundTargetTwsRoleChangeResponse]                    ^
 *             |                                             |
 *             +-(reject)->--->[target tries again later]->--+
 *             |                                             |
 *          (accept)                                         ^
 *             |                                             |
 *             |                                             |
 *             |  [     optional target call    ]            |
 *             +--[gsound_tws_role_change_cancel]---->-------┘
 *             |                                             |
 *             |                                             |
 *             v                                             |
 * [         target call          ]                          |
 * [gsound_tws_role_change_perform]                          |
 *             |                                             |
 *             |                                             |
 *             |                                             ^
 * [ GSound will call target's definition ]                  |
 * [of GSoundTargetTwsRoleChangeGSoundDone]                  |
 *             |                                             |
 *             v                                             |
 *             |  [     optional target call    ]            |
 *             +--[gsound_tws_role_change_cancel]---->-------┘
 *             |
 *             v
 * [         target call       ]
 * [gsound_tws_role_change_target_done]
 *             |
 *             |
 *             v
 * [Role change complete, this]
 * [  device is now a slave   ]
 *
 *
 * ### Controlled switch on slave
 *
 *  For the slave to role change to master:
 *    1. Call gsound_tws_role_change_target_done with to_master set to true.
 *       No prior request is required on the slave.
 *
 *   [start, device is slave]
 *             |
 *             |
 *             v
 * [         target call       ]
 * [gsound_tws_role_change_target_done]
 *             |
 *             |
 *             v
 *   [role change complete, this]
 *   [device is now a master    ]
 *
 * # Uncontrolled switch
 *
 * An "uncontrolled" switch is where the devices abruptly lose communication
 * with each other. An uncontrolled role change is likely to cause some loss of
 * assistant functionality for up to a couple minutes and should be avoided if
 * at all possible.  For an uncontrolled switch:
 *     1. call gsound_tws_role_change_fatal
 *
 */

/*******************************************************************************
 * Following declares the standard TWS
 * Interface API.
 ******************************************************************************/
typedef enum {
  /**
   * Left earbud in a TWS system
   */
  GSOUND_TARGET_EAR_ASSIGNMENT_LEFT = 1,

  /**
   * Right earbud in a TWS system
   */
  GSOUND_TARGET_EAR_ASSIGNMENT_RIGHT,
} GSoundTargetEarAssignment;

typedef struct {
  /**
   * Callback which should be executed by the target on boot to indicate which
   * device is the master and which is the slave.  Until this function is
   * called, GSound will not function.
   *
   * Only valid to call once.
   *
   * param[in]: is_master  true for master, false for slave
   * param[in]: ear        indicates whether bud is for left or right ear
   */
  void (*gsound_tws_role_change_init_role)(bool is_master,
                                           GSoundTargetEarAssignment ear);

  /**
   * Callback which should be executed by the target on the master to request
   * if it is an appropriate time to do a role change (e.g. no voice
   * query/response ongoing). Response will occur asynchronously: later GSound
   * will call GSoundTargetTwsRoleChangeResponse with accept or reject.
   */
  void (*gsound_tws_role_change_request)(void);

  /**
   * Callback which should be executed by the target on the master.  GSound will
   * respond with GSoundTargetTwsRoleChangeGSoundDone.  It should be called
   * sometime after GSound calls GSoundTargetTwsRoleChangeResponse(accepted).
   * For backwards compatibility with older companion app versions, if GSound
   * does not respond with GSoundTargetTwsRoleChangeGSoundDone within 500 msec,
   * the target must use the gsound_tws_role_change_fatal callback.
   *
   * param[in]: reconnection_delay - set the length of time in milliseconds that
   *                                 the companion app is required to leave the
   *                                 rfcomm channel disconnected before
   *                                 attempting to reconnect.
   */
  void (*gsound_tws_role_change_perform)(int32_t reconnection_delay);

  /**
   * Callback which should be executed by the target on both the master and the
   * slave.  On the master, the target must wait for
   * GSoundTargetTwsRoleChangeGSoundDone before sending
   * gsound_tws_role_change_target_done.
   *
   * On the (old) _master_:
   *     * After the target's role change is actually completed. Target is now
   *       the slave.
   * On the (old) _slave_:
   *     * After the target's role change is actually completed. Target is now
   *       the master.
   *
   * param[in]: to_master  true  if role is expected to be a master now,
   *                       false if role should be a slave.
   */
  void (*gsound_tws_role_change_target_done)(bool to_master);

  /**
   * Callback which should be executed by the target on the master (without any
   * prior request) if an immediate role change is needed.  GSound will respond
   * some time later with GSoundTargetTwsRoleChangeGSoundDone.
   * For backwards compatibility with older companion app versions, if GSound
   * does not respond with GSoundTargetTwsRoleChangeGSoundDone within 500 msec,
   * the target must use the gsound_tws_role_change_fatal callback.
   *
   * param[in]: reconnection_delay - set the length of time in milliseconds that
   *                                 the companion app is required to leave the
   *                                 rfcomm channel disconnected before
   *                                 attempting to reconnect.
   */
  void (*gsound_tws_role_change_force)(int32_t reconnection_delay);

  /**
   * Callback which may be executed by the target on the master.  It may be
   * called any time after a gsound_tws_role_change_request or force and prior
   * to a gsound_tws_role_change_target_done.
   */
  void (*gsound_tws_role_change_cancel)(void);

  /**
   * Callback which should be executed by the target on the master or slave to
   * cause an immediate transition in GSound to the given role. This shall only
   * be called in catastrophic (fatal - uncontrolled) cases.  When at all
   * possible, use the other callbacks for more orderly role change transitions.
   *
   * param[in]: to_master  true  if the new role is to be master,
   *                       false if the new role is to be slave
   */
  void (*gsound_tws_role_change_fatal)(bool to_master);
} GSoundTwsInterface;

/**
 * GSound calls this API after the target calls
 * gsound_tws_role_change_request. The parameter indicates
 * whether or not it is a good time to do a role change.
 *
 * If accepted is true, it is a good time to do a role change.
 *     GSound will refuse voice queries until gsound_tws_role_change_perform
 *     or gsound_tws_role_change_cancel is called.
 * If accepted is false, this means that it is not a good time to do a role
 *     change.  The target should retry at a later time or issue a
 *     gsound_tws_role_change_force if it can no longer wait.
 *
 * param[in]: accepted   true  if a role change is accepted
 *                       false if a role change is rejected
 */
void GSoundTargetTwsRoleChangeResponse(bool accepted);

/**
 * GSound calls this API on the old master after the target calls
 * gsound_tws_role_change_perform or gsound_tws_role_change_force.  This
 * indicates that GSound is ready for the target role change.  After receiving
 * this API call, the target must do one of:
 *   - gsound_tws_role_change_target_done (after the target's role change is
 *         complete)
 *   - gsound_tws_role_change_cancel (any time)
 *
 * For backwards compatibility with older companion app versions, if GSound
 * does not respond with GSoundTargetTwsRoleChangeGSoundDone within 500 msec of
 * the target calling gsound_tws_role_change_perform or
 * gsound_tws_role_change_force, the target must use the
 * gsound_tws_role_change_fatal callback.
 */
void GSoundTargetTwsRoleChangeGSoundDone(void);

/**
 *  No action is needed besides storing the handler APIs
 */
void GSoundTargetTwsInit(const GSoundTwsInterface *handler);

#ifdef __cplusplus
}
#endif

#endif  // GSOUND_TARGET_TWS_H
